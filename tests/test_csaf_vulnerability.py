# -*- coding: utf-8 -*-
# pylint: disable=line-too-long,missing-docstring,reimported,unused-import,unused-variable
import re

import pytest
from pydantic.error_wrappers import ValidationError

import turvallisuusneuvonta.csaf.cvss31.cvss31 as cvss31
import turvallisuusneuvonta.csaf.product as product
import turvallisuusneuvonta.csaf.vulnerability as vulnerability

CVSS31_VECTOR_STRING_LOG4J = 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H'
CVSS31_BASE_SCORE_LOG4J = '10.0'
CVSS31_BASE_SEVERITY_LOG4J = cvss31.SeverityType.critical

CWE_ID_352 = 'CWE-352'
CWE_NAME_352 = 'Cross-Site Request Forgery (CSRF)'


def test_vulnerability_empty():
    assert isinstance(vulnerability.Vulnerability(), vulnerability.Vulnerability)


def test_vulnerability_text():
    message = '__init__() takes 1 positional argument but 3 were given'
    with pytest.raises(TypeError, match=re.escape(message)):
        _ = vulnerability.Vulnerability('some', 'text')  # type: ignore


def test_vulnerability_score_text():
    message = '__init__() takes 1 positional argument but 2 were given'
    with pytest.raises(TypeError, match=re.escape(message)):
        _ = vulnerability.Score('text')  # type: ignore


def test_vulnerability_score_cvss31_log4j_cve_2021_44228():
    data = {
        'version': cvss31.Version.value,
        'vectorString': CVSS31_VECTOR_STRING_LOG4J,
        'baseScore': CVSS31_BASE_SCORE_LOG4J,
        'baseSeverity': CVSS31_BASE_SEVERITY_LOG4J,
    }
    cvss_cve_2021_44228 = cvss31.CVSS(**data)
    message = '1 validation error for Score'
    with pytest.raises(ValidationError, match=message) as err:
        _ = vulnerability.Score(cvss_v3=cvss_cve_2021_44228, products=[])
    assert '\nproducts -> product_ids\n  field required' in str(err.value)


def test_vulnerability_score_cvss31_log4j_cve_2021_44228_product_foo():
    data = {
        'version': cvss31.Version.value,
        'vectorString': CVSS31_VECTOR_STRING_LOG4J,
        'baseScore': CVSS31_BASE_SCORE_LOG4J,
        'baseSeverity': CVSS31_BASE_SEVERITY_LOG4J,
    }
    products = product.ListOfProductIds(product_ids=['foo'])
    cvss_cve_2021_44228 = cvss31.CVSS(**data)
    score = vulnerability.Score(cvss_v3=cvss_cve_2021_44228, products=products)
    assert score.cvss_v3 == cvss_cve_2021_44228
    assert score.products == products


def test_vulnerability_cwe_text():
    message = '__init__() takes 1 positional argument but 2 were given'
    with pytest.raises(TypeError, match=re.escape(message)):
        _ = vulnerability.Cwe('text')  # type: ignore


def test_vulnerability_cwe_352():
    data = {
        'id': CWE_ID_352,
        'name': CWE_NAME_352,
    }
    cwe_352 = vulnerability.Cwe(**data)
    assert cwe_352.id == CWE_ID_352
    assert cwe_352.name == CWE_NAME_352


def test_vulnerability_entitlement_empty():
    message = '1 validation error for EntitlementOfTheRemediation'
    with pytest.raises(ValidationError, match=message) as err:
        _ = vulnerability.EntitlementOfTheRemediation()
    assert '\nvalue\n  field required' in str(err.value)
